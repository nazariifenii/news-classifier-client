{"version":3,"sources":["_services/account.service.js","_services/alert.service.js","_services/classificator.service.js","_helpers/fake-backend.js","_helpers/fetch-wrapper.js","_helpers/history.js","_helpers/role.js","_components/Alert.jsx","_components/Nav.jsx","_components/PrivateRoute.jsx","home/index.js","account/Login.jsx","account/Register.jsx","account/VerifyEmail.jsx","account/ForgotPassword.jsx","account/ResetPassword.jsx","account/index.js","profile/Details.jsx","profile/Update.jsx","profile/index.js","admin/Overview.jsx","admin/users/List.jsx","admin/users/AddEdit.jsx","admin/users/index.js","admin/index.js","classificator/index.js","App.js","index.js"],"names":["refreshTokenTimeout","userSubject","BehaviorSubject","baseUrl","accountService","login","email","password","fetchWrapper","post","then","user","next","startRefreshTokenTimer","logout","refreshToken","register","params","verifyEmail","token","forgotPassword","validateResetToken","resetPassword","confirmPassword","getAll","get","getById","id","create","update","put","value","delete","x","asObservable","clearTimeout","history","push","jwtToken","JSON","parse","atob","split","timeout","Date","exp","getTime","now","setTimeout","alertSubject","Subject","defaultId","alertService","onAlert","pipe","filter","success","message","options","alert","type","AlertType","error","info","warn","clear","autoClose","undefined","classificatorService","processText","text","resp","usersKey","localStorage","getItem","url","requestOptions","method","headers","authHeader","fetch","handleResponse","body","credentials","stringify","userValue","isLoggedIn","isApiUrl","startsWith","Authorization","response","data","ok","includes","status","statusText","Promise","reject","createBrowserHistory","Role","Admin","User","Alert","fade","useState","alerts","setAlerts","removeAlert","alertWithFade","map","cssClasses","classes","alertTypeClass","join","useEffect","subscription","subscribe","filteredAlerts","keepAfterRouteChange","forEach","historyUnlisten","listen","pathname","endsWith","unsubscribe","length","className","index","onClick","dangerouslySetInnerHTML","__html","defaultProps","Nav","setUser","exact","to","role","path","component","AdminNav","match","PrivateRoute","Component","roles","rest","render","props","indexOf","state","from","location","Home","firstName","Login","validationSchema","Yup","shape","required","initialValues","onSubmit","setSubmitting","catch","errors","touched","isSubmitting","name","disabled","Register","title","lastName","min","oneOf","acceptTerms","fields","setStatus","as","htmlFor","VerifyEmail","EmailStatus","emailStatus","setEmailStatus","queryString","search","replace","getBody","ForgotPassword","finally","ResetPassword","TokenStatus","setToken","tokenStatus","setTokenStatus","getForm","Account","Details","Update","when","schema","isDeleting","style","width","Profile","Overview","List","users","setUsers","whiteSpace","colSpan","AddEdit","isAddMode","concat","createUser","updateUser","Users","Classificator","setText","TextField","onChange","event","target","label","multiline","rows","fullWidth","defaultValue","variant","Button","color","App","useLocation","slice","ReactDOM","StrictMode","document","getElementById"],"mappings":"+LAsHIA,E,yEAjHEC,EAAc,I,OAAIC,GAAgB,MAElCC,EAAO,iCAEAC,EAAiB,CAC5BC,MAmBF,SAAeC,EAAOC,GACpB,OAAOC,EACJC,KADI,UACIN,EADJ,iBAC4B,CAAEG,QAAOC,aACzCG,MAAK,SAACC,GAIL,OAFAV,EAAYW,KAAKD,GACjBE,IACOF,MAzBXG,SACAC,eACAC,SA4CF,SAAkBC,GAChB,OAAOT,EAAaC,KAAb,UAAqBN,EAArB,aAAyCc,IA5ChDC,YA+CF,SAAqBC,GACnB,OAAOX,EAAaC,KAAb,UAAqBN,EAArB,iBAA6C,CAAEgB,WA/CtDC,eAkDF,SAAwBd,GACtB,OAAOE,EAAaC,KAAb,UAAqBN,EAArB,oBAAgD,CAAEG,WAlDzDe,mBAqDF,SAA4BF,GAC1B,OAAOX,EAAaC,KAAb,UAAqBN,EAArB,yBAAqD,CAAEgB,WArD9DG,cAwDF,YAA8D,IAArCH,EAAoC,EAApCA,MAAOZ,EAA6B,EAA7BA,SAAUgB,EAAmB,EAAnBA,gBACxC,OAAOf,EAAaC,KAAb,UAAqBN,EAArB,mBAA+C,CACpDgB,QACAZ,WACAgB,qBA3DFC,OA+DF,WACE,OAAOhB,EAAaiB,IAAItB,IA/DxBuB,QAkEF,SAAiBC,GACf,OAAOnB,EAAaiB,IAAb,UAAoBtB,EAApB,YAA+BwB,KAlEtCC,OAqEF,SAAgBX,GACd,OAAOT,EAAaC,KAAKN,EAASc,IArElCY,OAwEF,SAAgBF,EAAIV,GAClB,OAAOT,EAAasB,IAAb,UAAoB3B,EAApB,YAA+BwB,GAAMV,GAAQP,MAAK,SAACC,GAOxD,OALIA,EAAKgB,KAAO1B,EAAY8B,MAAMJ,KAEhChB,EAAI,2BAAQV,EAAY8B,OAAUpB,GAClCV,EAAYW,KAAKD,IAEZA,MA/ETqB,OAoFF,SAAiBL,GACf,OAAOnB,EAAawB,OAAb,UAAuB7B,EAAvB,YAAkCwB,IAAMjB,MAAK,SAACuB,GAKnD,OAHIN,IAAO1B,EAAY8B,MAAMJ,IAC3Bb,IAEKmB,MAzFTtB,KAAMV,EAAYiC,eAClB,gBACE,OAAOjC,EAAY8B,QAevB,SAASjB,IAEPN,EAAaC,KAAb,UAAqBN,EAArB,iBAA6C,IAyF7CgC,aAAanC,GAvFbC,EAAYW,KAAK,MACjBwB,EAAQC,KAAK,kBAGf,SAAStB,IACP,OAAOP,EAAaC,KAAb,UAAqBN,EAArB,kBAA8C,IAAIO,MAAK,SAACC,GAI7D,OAFAV,EAAYW,KAAKD,GACjBE,IACOF,KAmEX,SAASE,IAEP,IAAMyB,EAAWC,KAAKC,MAAMC,KAAKxC,EAAY8B,MAAMO,SAASI,MAAM,KAAK,KAIjEC,EADU,IAAIC,KAAoB,IAAfN,EAASO,KACVC,UAAYF,KAAKG,MAAQ,IACjD/C,EAAsBgD,WAAWjC,EAAc4B,G,sBC5H3CM,EAAe,IAAIC,IACnBC,EAAY,gBAELC,EAAe,CACxBC,QAiBJ,WAAkC,IAAjB1B,EAAgB,uDAAXwB,EAClB,OAAOF,EAAaf,eAAeoB,KAAKC,aAAO,SAAAtB,GAAC,OAAIA,GAAKA,EAAEN,KAAOA,OAjBlE6B,QAqBJ,SAAiBC,EAASC,GACtBC,EAAM,2BAAKD,GAAN,IAAeE,KAAMC,EAAmBJ,cArB7CK,MAwBJ,SAAeL,EAASC,GACpBC,EAAM,2BAAKD,GAAN,IAAeE,KAAMC,EAAiBJ,cAxB3CM,KA2BJ,SAAcN,EAASC,GACnBC,EAAM,2BAAKD,GAAN,IAAeE,KAAMC,EAAgBJ,cA3B1CO,KA8BJ,SAAcP,EAASC,GACnBC,EAAM,2BAAKD,GAAN,IAAeE,KAAMC,EAAmBJ,cA9B7CE,QACAM,MAwCJ,WAAgC,IAAjBtC,EAAgB,uDAAXwB,EAChBF,EAAarC,KAAK,CAAEe,SAtCXkC,EACA,UADAA,EAEF,QAFEA,EAGH,OAHGA,EAIA,UA0Bb,SAASF,EAAMA,GACXA,EAAMhC,GAAKgC,EAAMhC,IAAMwB,EACvBQ,EAAMO,eAAiCC,IAApBR,EAAMO,WAAiCP,EAAMO,UAChEjB,EAAarC,KAAK+C,GC5CtB,IAEaS,EAAuB,CAClCC,YAGF,SAAqBC,GACnB,OAAO9D,EACJsB,IADI,UAPI,sCAOJ,iBAC2B,CAAEwC,KAAMA,IACvC5D,MAAK,SAAC6D,GAEL,OADAnB,EAAaI,QAAQ,2BACde,OCZb,IAAMC,EAAW,8CACHjC,KAAKC,MAAMiC,aAAaC,QAAQF,ICHvC,IAAMhE,EAAe,CAC1BiB,IAMF,SAAakD,GACX,IAAMC,EAAiB,CACrBC,OAAQ,MACRC,QAASC,EAAWJ,IAEtB,OAAOK,MAAML,EAAKC,GAAgBlE,KAAKuE,IAVvCxE,KAaF,SAAckE,EAAKO,GACjB,IAAMN,EAAiB,CACrBC,OAAQ,OACRC,QAAQ,aAAG,eAAgB,oBAAuBC,EAAWJ,IAC7DQ,YAAa,UACbD,KAAM3C,KAAK6C,UAAUF,IAEvB,OAAOF,MAAML,EAAKC,GAAgBlE,KAAKuE,IAnBvCnD,IAsBF,SAAa6C,EAAKO,GAChB,IAAMN,EAAiB,CACrBC,OAAQ,MACRC,QAAQ,aAAG,eAAgB,oBAAuBC,EAAWJ,IAC7DO,KAAM3C,KAAK6C,UAAUF,IAEvB,OAAOF,MAAML,EAAKC,GAAgBlE,KAAKuE,IA3BvCjD,OA+BF,SAAiB2C,GACf,IAAMC,EAAiB,CACrBC,OAAQ,SACRC,QAASC,EAAWJ,IAEtB,OAAOK,MAAML,EAAKC,GAAgBlE,KAAKuE,KAKzC,SAASF,EAAWJ,GAElB,IAAMhE,EAAOP,EAAeiF,UACtBC,EAAa3E,GAAQA,EAAK2B,SAC1BiD,EAAWZ,EAAIa,WAAW,yBAChC,OAAIF,GAAcC,EACT,CAAEE,cAAc,UAAD,OAAY9E,EAAK2B,WAEhC,GAIX,SAAS2C,EAAeS,GACtB,OAAOA,EAASpB,OAAO5D,MAAK,SAAC4D,GAC3B,IAAMqB,EAAOrB,GAAQ/B,KAAKC,MAAM8B,GAEhC,IAAKoB,EAASE,GAAI,CACZ,CAAC,IAAK,KAAKC,SAASH,EAASI,SAAW1F,EAAeiF,WAEzDjF,EAAeU,SAGjB,IAAMgD,EAAS6B,GAAQA,EAAKlC,SAAYiC,EAASK,WACjD,OAAOC,QAAQC,OAAOnC,GAGxB,OAAO6B,K,YCvEEvD,EAAU8D,cCFVC,EAAO,CAChBC,MAAO,QACPC,KAAM,Q,yBCcV,SAASC,EAAT,GAA8B,IAAb3E,EAAY,EAAZA,GAAI4E,EAAQ,EAARA,KAAQ,EACCC,mBAAS,IADV,mBACpBC,EADoB,KACZC,EADY,KA2C3B,SAASC,EAAYhD,GACnB,GAAI4C,EAAM,CAER,IAAMK,EAAa,2BAAQjD,GAAR,IAAe4C,MAAM,IACxCG,GAAU,SAACD,GAAD,OACRA,EAAOI,KAAI,SAAC5E,GAAD,OAAQA,IAAM0B,EAAQiD,EAAgB3E,QAInDe,YAAW,WACT0D,GAAU,SAACD,GAAD,OAAYA,EAAOlD,QAAO,SAACtB,GAAD,OAAOA,IAAM2E,UAChD,UAGHF,GAAU,SAACD,GAAD,OAAYA,EAAOlD,QAAO,SAACtB,GAAD,OAAOA,IAAM0B,QAIrD,SAASmD,EAAWnD,GAAQ,IAAD,EACzB,GAAKA,EAAL,CAEA,IAAMoD,EAAU,CAAC,QAAS,qBAEpBC,GAAc,mBACjBnD,EAAoB,uBADH,cAEjBA,EAAkB,sBAFD,cAGjBA,EAAiB,oBAHA,cAIjBA,EAAoB,uBAJH,GAapB,OANAkD,EAAQ1E,KAAK2E,EAAerD,EAAMC,OAE9BD,EAAM4C,MACRQ,EAAQ1E,KAAK,QAGR0E,EAAQE,KAAK,MAGtB,OA/EAC,qBAAU,WAER,IAAMC,EAAe/D,EAAaC,QAAQ1B,GAAIyF,WAAU,SAACzD,GAElDA,EAAMF,SAWTiD,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,CAAwB9C,OAG9BA,EAAMO,WACRlB,YAAW,kBAAM2D,EAAYhD,KAAQ,MAdvC+C,GAAU,SAACD,GAET,IAAMY,EAAiBZ,EAAOlD,QAAO,SAACtB,GAAD,OAAOA,EAAEqF,wBAI9C,OADAD,EAAeE,SAAQ,SAACtF,GAAD,cAAcA,EAAEqF,wBAChCD,QAcPG,EAAkBpF,EAAQqF,QAAO,YAAkB,EAAfC,SAE3BC,SAAS,MAEtBvE,EAAaa,MAAMtC,MAIrB,OAAO,WAELwF,EAAaS,cACbJ,OAED,IAyCEf,EAAOoB,OAGV,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACGrB,EAAOI,KAAI,SAAClD,EAAOoE,GAAR,OACV,sBAAiBD,UAAWhB,EAAWnD,GAAvC,UACE,mBAAGmE,UAAU,QAAQE,QAAS,kBAAMrB,EAAYhD,IAAhD,kBAGA,sBAAMsE,wBAAyB,CAAEC,OAAQvE,EAAMF,aAJvCsE,UANS,KAmB7BzB,EAAM6B,aA1Ge,CACnBxG,GAAI,gBACJ4E,MAAM,G,WCPR,SAAS6B,IAAO,IAAD,EACW5B,mBAAS,IADpB,mBACN7F,EADM,KACA0H,EADA,KASb,OANAnB,qBAAU,WAER,OADqB9G,EAAeO,KAAKyG,WAAU,SAACnF,GAAD,OAAOoG,EAAQpG,MAC9C2F,cACnB,IAGEjH,EAGH,gCACE,qBAAKmH,UAAU,2CAAf,SACE,sBAAKA,UAAU,aAAf,UACE,cAAC,IAAD,CAASQ,OAAK,EAACC,GAAG,IAAIT,UAAU,oBAAhC,wDAGA,cAAC,IAAD,CAASS,GAAG,iBAAiBT,UAAU,oBAAvC,sFAGA,cAAC,IAAD,CAASS,GAAG,WAAWT,UAAU,oBAAjC,4CAGCnH,EAAK6H,OAASrC,EAAKC,OAClB,cAAC,IAAD,CAASmC,GAAG,SAAST,UAAU,oBAA/B,4FAIF,mBAAGE,QAAS5H,EAAeU,OAAQgH,UAAU,oBAA7C,iDAKJ,cAAC,IAAD,CAAOW,KAAK,SAASC,UAAWC,OAzBlB,KA8BpB,SAASA,EAAT,GAA8B,IACpBF,EADmB,EAATG,MACVH,KAER,OACE,qBAAKX,UAAU,8CAAf,SACE,qBAAKA,UAAU,aAAf,SACE,cAAC,IAAD,CAASS,GAAE,UAAKE,EAAL,UAAmBX,UAAU,oBAAxC,uB,aC9CR,SAASe,EAAT,GAAiE,IAA9BC,EAA6B,EAAxCJ,UAAsBK,EAAkB,EAAlBA,MAAUC,EAAQ,qCAC9D,OACE,cAAC,IAAD,2BACMA,GADN,IAEEC,OAAQ,SAACC,GACP,IAAMvI,EAAOP,EAAeiF,UAC5B,OAAK1E,EAaDoI,IAAuC,IAA9BA,EAAMI,QAAQxI,EAAK6H,MAEvB,cAAC,IAAD,CAAUD,GAAI,CAAEb,SAAU,OAI5B,cAACoB,EAAD,eAAeI,IAhBlB,cAAC,IAAD,CACEX,GAAI,CACFb,SAAU,iBACV0B,MAAO,CAAEC,KAAMH,EAAMI,iBCbrC,SAASC,IACP,IAAM5I,EAAOP,EAAeiF,UAE5B,OACE,qBAAKyC,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qCAAQnH,EAAK6I,UAAb,OACA,yE,kBCJR,SAASC,EAAT,GAAuC,IAAtBrH,EAAqB,EAArBA,QAASkH,EAAY,EAAZA,SAMlBI,EAAmBC,MAAaC,MAAM,CAC1CtJ,MAAOqJ,MAAarJ,MAAM,oBAAoBuJ,SAAS,qBACvDtJ,SAAUoJ,MAAaE,SAAS,0BAiBlC,OACE,cAAC,IAAD,CACEC,cA1BkB,CACpBxJ,MAAO,GACPC,SAAU,IAyBRmJ,iBAAkBA,EAClBK,SAlBJ,cAA2D,IAAvCzJ,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAcyJ,EAAiB,EAAjBA,cACvC5G,EAAaa,QACb7D,EACGC,MAAMC,EAAOC,GACbG,MAAK,WAAO,IACH2I,GAASC,EAASF,OAAS,CAAEC,KAAM,CAAE3B,SAAU,OAA/C2B,KACRjH,EAAQC,KAAKgH,MAEdY,OAAM,SAACnG,GACNkG,GAAc,GACd5G,EAAaU,MAAMA,OAKvB,SAKG,gBAAGoG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,aAApB,OACC,eAAC,IAAD,WACE,oBAAItC,UAAU,cAAd,mBACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,0CACA,cAAC,IAAD,CACEuC,KAAK,QACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAO5J,OAAS6J,EAAQ7J,MAAQ,cAAgB,MAGrD,cAAC,IAAD,CACE+J,KAAK,QACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,aAAf,UACE,6CACA,cAAC,IAAD,CACEuC,KAAK,WACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3J,UAAY4J,EAAQ5J,SAAW,cAAgB,MAG3D,cAAC,IAAD,CACE8J,KAAK,WACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,yBACElE,KAAK,SACL0G,SAAUF,EACVtC,UAAU,kBAHZ,UAKGsC,GACC,sBAAMtC,UAAU,0CANpB,WAUA,cAAC,IAAD,CAAMS,GAAG,WAAWT,UAAU,eAA9B,yBAIF,qBAAKA,UAAU,4BAAf,SACE,cAAC,IAAD,CAAMS,GAAG,kBAAkBT,UAAU,oBAArC,4CCpFhB,SAASyC,EAAT,GAAgC,IAAZnI,EAAW,EAAXA,QAWZsH,EAAmBC,MAAaC,MAAM,CAC1CY,MAAOb,MAAaE,SAAS,qBAC7BL,UAAWG,MAAaE,SAAS,0BACjCY,SAAUd,MAAaE,SAAS,yBAChCvJ,MAAOqJ,MAAarJ,MAAM,oBAAoBuJ,SAAS,qBACvDtJ,SAAUoJ,MACPe,IAAI,EAAG,0CACPb,SAAS,wBACZtI,gBAAiBoI,MACdgB,MAAM,CAAChB,IAAQ,YAAa,MAAO,wBACnCE,SAAS,gCACZe,YAAajB,MAAWgB,MACtB,EAAC,GACD,2CAqBJ,OACE,cAAC,IAAD,CACEb,cA9CkB,CACpBU,MAAO,GACPhB,UAAW,GACXiB,SAAU,GACVnK,MAAO,GACPC,SAAU,GACVgB,gBAAiB,GACjBqJ,aAAa,GAwCXlB,iBAAkBA,EAClBK,SArBJ,SAAkBc,EAAlB,GAAyD,IAA7BC,EAA4B,EAA5BA,UAAWd,EAAiB,EAAjBA,cACrCc,IACA1K,EACGY,SAAS6J,GACTnK,MAAK,WACJ0C,EAAaI,QACX,iFACA,CAAE8D,sBAAsB,IAE1BlF,EAAQC,KAAK,YAEd4H,OAAM,SAACnG,GACNkG,GAAc,GACd5G,EAAaU,MAAMA,OAKvB,SAKG,gBAAGoG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,aAApB,OACC,eAAC,IAAD,WACE,oBAAItC,UAAU,cAAd,sBACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,0CACA,eAAC,IAAD,CACEuC,KAAK,QACLU,GAAG,SACHjD,UACE,gBACCoC,EAAOM,OAASL,EAAQK,MAAQ,cAAgB,IALrD,UAQE,wBAAQzI,MAAM,KACd,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,KAAd,mBAEF,cAAC,IAAD,CACEsI,KAAK,QACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,mBAAf,UACE,+CACA,cAAC,IAAD,CACEuC,KAAK,YACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAOV,WAAaW,EAAQX,UAAY,cAAgB,MAG7D,cAAC,IAAD,CACEa,KAAK,YACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,mBAAf,UACE,8CACA,cAAC,IAAD,CACEuC,KAAK,WACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAOO,UAAYN,EAAQM,SAAW,cAAgB,MAG3D,cAAC,IAAD,CACEJ,KAAK,WACL3B,UAAU,MACVZ,UAAU,2BAIhB,sBAAKA,UAAU,aAAf,UACE,0CACA,cAAC,IAAD,CACEuC,KAAK,QACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAO5J,OAAS6J,EAAQ7J,MAAQ,cAAgB,MAGrD,cAAC,IAAD,CACE+J,KAAK,QACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,6CACA,cAAC,IAAD,CACEuC,KAAK,WACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3J,UAAY4J,EAAQ5J,SAAW,cAAgB,MAG3D,cAAC,IAAD,CACE8J,KAAK,WACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,iBAAf,UACE,qDACA,cAAC,IAAD,CACEuC,KAAK,kBACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3I,iBAAmB4I,EAAQ5I,gBAC/B,cACA,MAGR,cAAC,IAAD,CACE8I,KAAK,kBACL3B,UAAU,MACVZ,UAAU,2BAIhB,sBAAKA,UAAU,wBAAf,UACE,cAAC,IAAD,CACElE,KAAK,WACLyG,KAAK,cACL1I,GAAG,cACHmG,UACE,qBACCoC,EAAOU,aAAeT,EAAQS,YAC3B,cACA,MAGR,uBAAOI,QAAQ,cAAclD,UAAU,mBAAvC,uCAGA,cAAC,IAAD,CACEuC,KAAK,cACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,aAAf,UACE,yBACElE,KAAK,SACL0G,SAAUF,EACVtC,UAAU,kBAHZ,UAKGsC,GACC,sBAAMtC,UAAU,0CANpB,cAUA,cAAC,IAAD,CAAMS,GAAG,QAAQT,UAAU,eAA3B,gC,qBCpMd,SAASmD,EAAT,GAA6C,IAAtB7I,EAAqB,EAArBA,QAASkH,EAAY,EAAZA,SACxB4B,EACO,YADPA,EAEI,SAHgC,EAMJ1E,mBAAS0E,GANL,mBAMnCC,EANmC,KAMtBC,EANsB,KAyC1C,OAjCAlE,qBAAU,WAAO,IACP/F,EAAUkK,IAAY7I,MAAM8G,EAASgC,QAArCnK,MAGRiB,EAAQmJ,QAAQjC,EAAS5B,UAEzBtH,EACGc,YAAYC,GACZT,MAAK,WACJ0C,EAAaI,QAAQ,6CAA8C,CACjE8D,sBAAsB,IAExBlF,EAAQC,KAAK,YAEd4H,OAAM,WACLmB,EAAeF,QAElB,IAiBD,gCACE,oBAAIpD,UAAU,cAAd,0BACA,qBAAKA,UAAU,YAAf,SAjBJ,WACE,OAAQqD,GACN,KAAKD,EACH,OAAO,+CACT,KAAKA,EACH,OACE,kGACkE,IAChE,cAAC,IAAD,CAAM3C,GAAG,kBAAT,6BAFF,aAWwBiD,QC3ClC,SAASC,IACP,IAIM/B,EAAmBC,MAAaC,MAAM,CAC1CtJ,MAAOqJ,MAAarJ,MAAM,oBAAoBuJ,SAAS,uBAgBzD,OACE,cAAC,IAAD,CACEC,cAvBkB,CACpBxJ,MAAO,IAuBLoJ,iBAAkBA,EAClBK,SAjBJ,cAAiD,IAA7BzJ,EAA4B,EAA5BA,MAAW0J,EAAiB,EAAjBA,cAC7B5G,EAAaa,QACb7D,EACGgB,eAAed,GACfI,MAAK,kBACJ0C,EAAaI,QACX,8DAGHyG,OAAM,SAACnG,GAAD,OAAWV,EAAaU,MAAMA,MACpC4H,SAAQ,kBAAM1B,GAAc,OAI/B,SAKG,gBAAGE,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,aAApB,OACC,eAAC,IAAD,WACE,oBAAItC,UAAU,cAAd,6BACA,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,aAAf,UACE,0CACA,cAAC,IAAD,CACEuC,KAAK,QACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAO5J,OAAS6J,EAAQ7J,MAAQ,cAAgB,MAGrD,cAAC,IAAD,CACE+J,KAAK,QACL3B,UAAU,MACVZ,UAAU,wBAGd,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,yBACElE,KAAK,SACL0G,SAAUF,EACVtC,UAAU,kBAHZ,UAKGsC,GACC,sBAAMtC,UAAU,0CANpB,YAUA,cAAC,IAAD,CAAMS,GAAG,QAAQT,UAAU,eAA3B,kCC3DhB,SAAS6D,EAAT,GAA+C,IAAtBvJ,EAAqB,EAArBA,QAASkH,EAAY,EAAZA,SAC1BsC,EACQ,aADRA,EAEG,QAFHA,EAGK,UAJiC,EAOlBpF,mBAAS,MAPS,mBAOrCrF,EAPqC,KAO9B0K,EAP8B,OAQNrF,mBAASoF,GARH,mBAQrCE,EARqC,KAQxBC,EARwB,KA2I5C,OAjIA7E,qBAAU,WAAO,IACP/F,EAAUkK,IAAY7I,MAAM8G,EAASgC,QAArCnK,MAGRiB,EAAQmJ,QAAQjC,EAAS5B,UAEzBtH,EACGiB,mBAAmBF,GACnBT,MAAK,WACJmL,EAAS1K,GACT4K,EAAeH,MAEhB3B,OAAM,WACL8B,EAAeH,QAElB,IAmHD,gCACE,oBAAI9D,UAAU,cAAd,4BACA,qBAAKA,UAAU,YAAf,SAnBJ,WACE,OAAQgE,GACN,KAAKF,EACH,OAnGN,WACE,IAKMlC,EAAmBC,MAAaC,MAAM,CAC1CrJ,SAAUoJ,MACPe,IAAI,EAAG,0CACPb,SAAS,wBACZtI,gBAAiBoI,MACdgB,MAAM,CAAChB,IAAQ,YAAa,MAAO,wBACnCE,SAAS,kCAmBd,OACE,cAAC,IAAD,CACEC,cAhCkB,CACpBvJ,SAAU,GACVgB,gBAAiB,IA+BfmI,iBAAkBA,EAClBK,SApBJ,cAAqE,IAAjDxJ,EAAgD,EAAhDA,SAAUgB,EAAsC,EAAtCA,gBAAqByI,EAAiB,EAAjBA,cACjD5G,EAAaa,QACb7D,EACGkB,cAAc,CAAEH,QAAOZ,WAAUgB,oBACjCb,MAAK,WACJ0C,EAAaI,QAAQ,+CAAgD,CACnE8D,sBAAsB,IAExBlF,EAAQC,KAAK,YAEd4H,OAAM,SAACnG,GACNkG,GAAc,GACd5G,EAAaU,MAAMA,OAKvB,SAKG,gBAAGoG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,aAApB,OACC,eAAC,IAAD,WACE,sBAAKtC,UAAU,aAAf,UACE,6CACA,cAAC,IAAD,CACEuC,KAAK,WACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3J,UAAY4J,EAAQ5J,SAAW,cAAgB,MAG3D,cAAC,IAAD,CACE8J,KAAK,WACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,aAAf,UACE,qDACA,cAAC,IAAD,CACEuC,KAAK,kBACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3I,iBAAmB4I,EAAQ5I,gBAC/B,cACA,MAGR,cAAC,IAAD,CACE8I,KAAK,kBACL3B,UAAU,MACVZ,UAAU,wBAGd,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,yBACElE,KAAK,SACL0G,SAAUF,EACVtC,UAAU,kBAHZ,UAKGsC,GACC,sBAAMtC,UAAU,0CANpB,oBAUA,cAAC,IAAD,CAAMS,GAAG,SAAST,UAAU,eAA5B,+BAcDkE,GACT,KAAKJ,EACH,OACE,kHAEa,cAAC,IAAD,CAAMrD,GAAG,kBAAT,6BAFb,YAKJ,KAAKqD,EACH,OAAO,uDAOmBJ,QC3IlC,SAASS,GAAT,GAAsC,IAAnB7J,EAAkB,EAAlBA,QACTqG,EAD2B,EAATG,MAClBH,KASR,OAPAvB,qBAAU,WAEJ9G,EAAeiF,WACjBjD,EAAQC,KAAK,OAEd,IAGD,qBAAKyF,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,4BAAf,SACE,qBAAKA,UAAU,WAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOW,KAAI,UAAKA,EAAL,UAAmBC,UAAWe,IACzC,cAAC,IAAD,CAAOhB,KAAI,UAAKA,EAAL,aAAsBC,UAAW6B,IAC5C,cAAC,IAAD,CAAO9B,KAAI,UAAKA,EAAL,iBAA0BC,UAAWuC,IAChD,cAAC,IAAD,CACExC,KAAI,UAAKA,EAAL,oBACJC,UAAW+C,IAEb,cAAC,IAAD,CACEhD,KAAI,UAAKA,EAAL,mBACJC,UAAWiD,eC/B3B,SAASO,GAAT,GAA6B,IACnBzD,EADkB,EAATG,MACTH,KACF9H,EAAOP,EAAeiF,UAE5B,OACE,gCACE,4CACA,8BACE,4CADF,IAC2B1E,EAAK6J,MADhC,IACwC7J,EAAK6I,UAD7C,IACyD7I,EAAK8J,SAC5D,uBACA,6CAHF,IAG4B9J,EAAKL,SAEjC,4BACE,cAAC,IAAD,CAAMiI,GAAE,UAAKE,EAAL,WAAR,iCCXR,SAAS0D,GAAT,GAA8B,IAAZ/J,EAAW,EAAXA,QACVzB,EAAOP,EAAeiF,UACtByE,EAAgB,CACpBU,MAAO7J,EAAK6J,MACZhB,UAAW7I,EAAK6I,UAChBiB,SAAU9J,EAAK8J,SACfnK,MAAOK,EAAKL,MACZC,SAAU,GACVgB,gBAAiB,IAGbmI,EAAmBC,MAAaC,MAAM,CAC1CY,MAAOb,MAAaE,SAAS,qBAC7BL,UAAWG,MAAaE,SAAS,0BACjCY,SAAUd,MAAaE,SAAS,yBAChCvJ,MAAOqJ,MAAarJ,MAAM,oBAAoBuJ,SAAS,qBACvDtJ,SAAUoJ,MAAae,IAAI,EAAG,0CAC9BnJ,gBAAiBoI,MACdyC,KAAK,YAAY,SAAC7L,EAAU8L,GAC3B,GAAI9L,EAAU,OAAO8L,EAAOxC,SAAS,mCAEtCc,MAAM,CAAChB,IAAQ,aAAc,0BArBP,MAwCSnD,oBAAS,GAxClB,mBAwCpB8F,EAxCoB,UAkD3B,OACE,cAAC,IAAD,CACExC,cAAeA,EACfJ,iBAAkBA,EAClBK,SA9BJ,SAAkBc,EAAlB,GAAyD,IAA7BC,EAA4B,EAA5BA,UAAWd,EAAiB,EAAjBA,cACrCc,IACA1K,EACGyB,OAAOlB,EAAKgB,GAAIkJ,GAChBnK,MAAK,WACJ0C,EAAaI,QAAQ,oBAAqB,CACxC8D,sBAAsB,IAExBlF,EAAQC,KAAK,QAEd4H,OAAM,SAACnG,GACNkG,GAAc,GACd5G,EAAaU,MAAMA,OAevB,SAKG,gBAAGoG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,aAApB,OACC,eAAC,IAAD,WACE,gDACA,sBAAKtC,UAAU,WAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,0CACA,eAAC,IAAD,CACEuC,KAAK,QACLU,GAAG,SACHjD,UACE,gBACCoC,EAAOM,OAASL,EAAQK,MAAQ,cAAgB,IALrD,UAQE,wBAAQzI,MAAM,KACd,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,KAAd,mBAEF,cAAC,IAAD,CACEsI,KAAK,QACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,mBAAf,UACE,+CACA,cAAC,IAAD,CACEuC,KAAK,YACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAOV,WAAaW,EAAQX,UAAY,cAAgB,MAG7D,cAAC,IAAD,CACEa,KAAK,YACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,mBAAf,UACE,8CACA,cAAC,IAAD,CACEuC,KAAK,WACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAOO,UAAYN,EAAQM,SAAW,cAAgB,MAG3D,cAAC,IAAD,CACEJ,KAAK,WACL3B,UAAU,MACVZ,UAAU,2BAIhB,sBAAKA,UAAU,aAAf,UACE,0CACA,cAAC,IAAD,CACEuC,KAAK,QACLzG,KAAK,OACLkE,UACE,gBACCoC,EAAO5J,OAAS6J,EAAQ7J,MAAQ,cAAgB,MAGrD,cAAC,IAAD,CACE+J,KAAK,QACL3B,UAAU,MACVZ,UAAU,wBAGd,oBAAIA,UAAU,OAAd,6BACA,sEACA,sBAAKA,UAAU,WAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,6CACA,cAAC,IAAD,CACEuC,KAAK,WACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3J,UAAY4J,EAAQ5J,SAAW,cAAgB,MAG3D,cAAC,IAAD,CACE8J,KAAK,WACL3B,UAAU,MACVZ,UAAU,wBAGd,sBAAKA,UAAU,iBAAf,UACE,qDACA,cAAC,IAAD,CACEuC,KAAK,kBACLzG,KAAK,WACLkE,UACE,gBACCoC,EAAO3I,iBAAmB4I,EAAQ5I,gBAC/B,cACA,MAGR,cAAC,IAAD,CACE8I,KAAK,kBACL3B,UAAU,MACVZ,UAAU,2BAIhB,sBAAKA,UAAU,aAAf,UACE,yBACElE,KAAK,SACL0G,SAAUF,EACVtC,UAAU,uBAHZ,UAKGsC,GACC,sBAAMtC,UAAU,0CANpB,YAUA,wBACElE,KAAK,SACLoE,QAAS,aACTF,UAAU,iBACVyE,MAAO,CAAEC,MAAO,QAChBlC,SAAUgC,EALZ,SAOGA,EACC,sBAAMxE,UAAU,qCAEhB,4CAGJ,cAAC,IAAD,CAAMS,GAAG,IAAIT,UAAU,eAAvB,6BClMZ,SAAS2E,GAAT,GAA6B,IACnBhE,EADkB,EAATG,MACTH,KAER,OACE,qBAAKX,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOQ,OAAK,EAACG,KAAMA,EAAMC,UAAWwD,KACpC,cAAC,IAAD,CAAOzD,KAAI,UAAKA,EAAL,WAAoBC,UAAWyD,YCXpD,SAASO,GAAT,GAA8B,IAClBjE,EADiB,EAATG,MACRH,KAER,OACI,gCACI,uCACA,qFACA,4BAAG,cAAC,IAAD,CAAMF,GAAE,UAAKE,EAAL,UAAR,+BCLf,SAASkE,GAAT,GAA0B,IAChBlE,EADe,EAATG,MACNH,KADe,EAEGjC,mBAAS,MAFZ,mBAEhBoG,EAFgB,KAETC,EAFS,KAsBvB,OAlBA3F,qBAAU,WACR9G,EAAeoB,SAASd,MAAK,SAACuB,GAAD,OAAO4K,EAAS5K,QAC5C,IAiBD,gCACE,uCACA,kFACA,cAAC,IAAD,CAAMsG,GAAE,UAAKE,EAAL,QAAiBX,UAAU,8BAAnC,sBAGA,wBAAOA,UAAU,sBAAjB,UACE,gCACE,+BACE,oBAAIyE,MAAO,CAAEC,MAAO,OAApB,kBACA,oBAAID,MAAO,CAAEC,MAAO,OAApB,mBACA,oBAAID,MAAO,CAAEC,MAAO,OAApB,kBACA,oBAAID,MAAO,CAAEC,MAAO,cAGxB,kCACGI,GACCA,EAAM/F,KAAI,SAAClG,GAAD,OACR,+BACE,+BACGA,EAAK6J,MADR,IACgB7J,EAAK6I,UADrB,IACiC7I,EAAK8J,YAEtC,6BAAK9J,EAAKL,QACV,6BAAKK,EAAK6H,OACV,qBAAI+D,MAAO,CAAEO,WAAY,UAAzB,UACE,cAAC,IAAD,CACEvE,GAAE,UAAKE,EAAL,iBAAkB9H,EAAKgB,IACzBmG,UAAU,8BAFZ,kBAMA,wBACEE,QAAS,kBA/CPrG,EA+CwBhB,EAAKgB,GA9C/CkL,EACED,EAAM/F,KAAI,SAAC5E,GAIT,OAHIA,EAAEN,KAAOA,IACXM,EAAEqK,YAAa,GAEVrK,WAGX7B,EAAe4B,OAAOL,GAAIjB,MAAK,WAC7BmM,GAAS,SAACD,GAAD,OAAWA,EAAMrJ,QAAO,SAACtB,GAAD,OAAOA,EAAEN,KAAOA,WAVrD,IAAoBA,GAgDFmG,UAAU,wBACVyE,MAAO,CAAEC,MAAO,QAChBlC,SAAU3J,EAAK2L,WAJjB,SAMG3L,EAAK2L,WACJ,sBAAMxE,UAAU,qCAEhB,iDAtBCnH,EAAKgB,QA4BhBiL,GACA,6BACE,oBAAIG,QAAQ,IAAIjF,UAAU,cAA1B,SACE,sBAAMA,UAAU,+DCtEhC,SAASkF,GAAT,GAAsC,IAAnB5K,EAAkB,EAAlBA,QACTT,EAD2B,EAATiH,MACL3H,OAAbU,GACFsL,GAAatL,EAYb+H,EAAmBC,MAAaC,MAAM,CAC1CY,MAAOb,MAAaE,SAAS,qBAC7BL,UAAWG,MAAaE,SAAS,0BACjCY,SAAUd,MAAaE,SAAS,yBAChCvJ,MAAOqJ,MAAarJ,MAAM,oBAAoBuJ,SAAS,qBACvDrB,KAAMmB,MAAaE,SAAS,oBAC5BtJ,SAAUoJ,MACPuD,OAAOD,EAAYtD,MAAaE,SAAS,wBAA0B,MACnEa,IAAI,EAAG,0CACVnJ,gBAAiBoI,MACdyC,KAAK,YAAY,SAAC7L,EAAU8L,GAC3B,GAAI9L,EAAU,OAAO8L,EAAOxC,SAAS,mCAEtCc,MAAM,CAAChB,IAAQ,aAAc,0BA0ClC,OACE,cAAC,IAAD,CACEG,cAnEkB,CACpBU,MAAO,GACPhB,UAAW,GACXiB,SAAU,GACVnK,MAAO,GACPkI,KAAM,GACNjI,SAAU,GACVgB,gBAAiB,IA6DfmI,iBAAkBA,EAClBK,SA3CJ,SAAkBc,EAAlB,GAAyD,IAA7BC,EAA4B,EAA5BA,UAAWd,EAAiB,EAAjBA,cACrCc,IACImC,EAON,SAAoBpC,EAAQb,GAC1B5J,EACGwB,OAAOiJ,GACPnK,MAAK,WACJ0C,EAAaI,QAAQ,0BAA2B,CAC9C8D,sBAAsB,IAExBlF,EAAQC,KAAK,QAEd4H,OAAM,SAACnG,GACNkG,GAAc,GACd5G,EAAaU,MAAMA,MAjBrBqJ,CAAWtC,EAAQb,GAqBvB,SAAoBrI,EAAIkJ,EAAQb,GAC9B5J,EACGyB,OAAOF,EAAIkJ,GACXnK,MAAK,WACJ0C,EAAaI,QAAQ,oBAAqB,CACxC8D,sBAAsB,IAExBlF,EAAQC,KAAK,SAEd4H,OAAM,SAACnG,GACNkG,GAAc,GACd5G,EAAaU,MAAMA,MA9BrBsJ,CAAWzL,EAAIkJ,EAAQb,MCpC7B,SAASqD,GAAT,GAA2B,IACf5E,EADc,EAATG,MACLH,KAER,OACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOH,OAAK,EAACG,KAAMA,EAAMC,UAAWiE,KACpC,cAAC,IAAD,CAAOlE,KAAI,UAAKA,EAAL,QAAiBC,UAAWsE,KACvC,cAAC,IAAD,CAAOvE,KAAI,UAAKA,EAAL,aAAsBC,UAAWsE,QCPxD,SAAS5G,GAAT,GAA2B,IACfqC,EADc,EAATG,MACLH,KAER,OACI,qBAAKX,UAAU,MAAf,SACI,qBAAKA,UAAU,YAAf,SACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOQ,OAAK,EAACG,KAAMA,EAAMC,UAAWgE,KACpC,cAAC,IAAD,CAAOjE,KAAI,UAAKA,EAAL,UAAmBC,UAAW2E,Y,wBCT7D,SAASC,KAAiB,IAAD,EACC9G,mBAAS,IADV,mBAChBlC,EADgB,KACViJ,EADU,KAGvB,OACE,gCACE,yIACA,cAACC,GAAA,EAAD,CACEC,SAAU,SAACC,GAAD,OAAWH,EAAQG,EAAMC,OAAO5L,QAC1CJ,GAAG,4BACHiM,MAAM,kFACNC,WAAS,EACTC,KAAM,EACNC,WAAW,EACXC,aAAc1J,EACd2J,QAAQ,aAEV,cAACC,GAAA,EAAD,CACEC,MAAO,UACPnG,QAAS,WACP5D,EAAqBC,YAAYC,IAEnC2J,QAAS,YALX,+F,OCiBSG,OA1Bf,WAAgB,IACN1G,EAAa2G,cAAb3G,SADK,EAEWlB,mBAAS,IAFpB,mBAEA6B,GAFA,WASb,OALAnB,qBAAU,WAER,OADqB9G,EAAeO,KAAKyG,WAAU,SAACnF,GAAD,OAAOoG,EAAQpG,MAC9C2F,cACnB,IAGD,sBAAKE,UAAU,MAAf,UACE,cAACM,EAAD,IACA,cAAC9B,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAU+C,KAAK,aAAad,GAAIb,EAAS4G,MAAM,GAAI,KACnD,cAACzF,EAAD,CAAcP,OAAK,EAACG,KAAK,IAAIC,UAAWa,IACxC,cAACV,EAAD,CAAcJ,KAAK,iBAAiBC,UAAW4E,KAC/C,cAACzE,EAAD,CAAcJ,KAAK,WAAWC,UAAW+D,KACzC,cAAC5D,EAAD,CAAcJ,KAAK,SAASM,MAAO,CAAC5C,EAAKC,OAAQsC,UAAWtC,KAC5D,cAAC,IAAD,CAAOqC,KAAK,WAAWC,UAAWuD,KAClC,cAAC,IAAD,CAAU5C,KAAK,IAAId,GAAG,a,OCnB9BgG,IAAStF,OACP,cAAC,IAAMuF,WAAP,UACE,cAAC,IAAD,CAAQpM,QAASA,EAAjB,SACE,cAAC,GAAD,QAGJqM,SAASC,eAAe,W","file":"static/js/main.dc89fa96.chunk.js","sourcesContent":["import { BehaviorSubject } from \"rxjs\";\n\n// import config from \"config\";\nimport { fetchWrapper, history } from \"../_helpers\";\n\nconst userSubject = new BehaviorSubject(null);\n// const baseUrl = `${config.apiUrl}/accounts`;\nconst baseUrl = `http://localhost:4000/accounts`;\n\nexport const accountService = {\n  login,\n  logout,\n  refreshToken,\n  register,\n  verifyEmail,\n  forgotPassword,\n  validateResetToken,\n  resetPassword,\n  getAll,\n  getById,\n  create,\n  update,\n  delete: _delete,\n  user: userSubject.asObservable(),\n  get userValue() {\n    return userSubject.value;\n  },\n};\n\nfunction login(email, password) {\n  return fetchWrapper\n    .post(`${baseUrl}/authenticate`, { email, password })\n    .then((user) => {\n      // publish user to subscribers and start timer to refresh token\n      userSubject.next(user);\n      startRefreshTokenTimer();\n      return user;\n    });\n}\n\nfunction logout() {\n  // revoke token, stop refresh timer, publish null to user subscribers and redirect to login page\n  fetchWrapper.post(`${baseUrl}/revoke-token`, {});\n  stopRefreshTokenTimer();\n  userSubject.next(null);\n  history.push(\"/account/login\");\n}\n\nfunction refreshToken() {\n  return fetchWrapper.post(`${baseUrl}/refresh-token`, {}).then((user) => {\n    // publish user to subscribers and start timer to refresh token\n    userSubject.next(user);\n    startRefreshTokenTimer();\n    return user;\n  });\n}\n\nfunction register(params) {\n  return fetchWrapper.post(`${baseUrl}/register`, params);\n}\n\nfunction verifyEmail(token) {\n  return fetchWrapper.post(`${baseUrl}/verify-email`, { token });\n}\n\nfunction forgotPassword(email) {\n  return fetchWrapper.post(`${baseUrl}/forgot-password`, { email });\n}\n\nfunction validateResetToken(token) {\n  return fetchWrapper.post(`${baseUrl}/validate-reset-token`, { token });\n}\n\nfunction resetPassword({ token, password, confirmPassword }) {\n  return fetchWrapper.post(`${baseUrl}/reset-password`, {\n    token,\n    password,\n    confirmPassword,\n  });\n}\n\nfunction getAll() {\n  return fetchWrapper.get(baseUrl);\n}\n\nfunction getById(id) {\n  return fetchWrapper.get(`${baseUrl}/${id}`);\n}\n\nfunction create(params) {\n  return fetchWrapper.post(baseUrl, params);\n}\n\nfunction update(id, params) {\n  return fetchWrapper.put(`${baseUrl}/${id}`, params).then((user) => {\n    // update stored user if the logged in user updated their own record\n    if (user.id === userSubject.value.id) {\n      // publish updated user to subscribers\n      user = { ...userSubject.value, ...user };\n      userSubject.next(user);\n    }\n    return user;\n  });\n}\n\n// prefixed with underscore because 'delete' is a reserved word in javascript\nfunction _delete(id) {\n  return fetchWrapper.delete(`${baseUrl}/${id}`).then((x) => {\n    // auto logout if the logged in user deleted their own record\n    if (id === userSubject.value.id) {\n      logout();\n    }\n    return x;\n  });\n}\n\n// helper functions\n\nlet refreshTokenTimeout;\n\nfunction startRefreshTokenTimer() {\n  // parse json object from base64 encoded jwt token\n  const jwtToken = JSON.parse(atob(userSubject.value.jwtToken.split(\".\")[1]));\n\n  // set a timeout to refresh the token a minute before it expires\n  const expires = new Date(jwtToken.exp * 1000);\n  const timeout = expires.getTime() - Date.now() - 60 * 1000;\n  refreshTokenTimeout = setTimeout(refreshToken, timeout);\n}\n\nfunction stopRefreshTokenTimer() {\n  clearTimeout(refreshTokenTimeout);\n}\n","import { Subject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nconst alertSubject = new Subject();\nconst defaultId = 'default-alert';\n\nexport const alertService = {\n    onAlert,\n    success,\n    error,\n    info,\n    warn,\n    alert,\n    clear\n};\n\nexport const AlertType = {\n    Success: 'Success',\n    Error: 'Error',\n    Info: 'Info',\n    Warning: 'Warning'\n}\n\n// enable subscribing to alerts observable\nfunction onAlert(id = defaultId) {\n    return alertSubject.asObservable().pipe(filter(x => x && x.id === id));\n}\n\n// convenience methods\nfunction success(message, options) {\n    alert({ ...options, type: AlertType.Success, message });\n}\n\nfunction error(message, options) {\n    alert({ ...options, type: AlertType.Error, message });\n}\n\nfunction info(message, options) {\n    alert({ ...options, type: AlertType.Info, message });\n}\n\nfunction warn(message, options) {\n    alert({ ...options, type: AlertType.Warning, message });\n}\n\n// core alert method\nfunction alert(alert) {\n    alert.id = alert.id || defaultId;\n    alert.autoClose = (alert.autoClose === undefined ? true : alert.autoClose);\n    alertSubject.next(alert);\n}\n\n// clear alerts\nfunction clear(id = defaultId) {\n    alertSubject.next({ id });\n}","import { fetchWrapper } from \"../_helpers\";\nimport { alertService } from \"../_services/alert.service\";\n// import config from \"config\";\n\n// const baseUrl = `${config.apiUrl}/classificator`;\nconst baseUrl = `http://localhost:4000/classificator`;\n\nexport const classificatorService = {\n  processText,\n};\n\nfunction processText(text) {\n  return fetchWrapper\n    .put(`${baseUrl}/process-text`, { text: text })\n    .then((resp) => {\n      alertService.success(\"Text processing success\");\n      return resp;\n    });\n}\n","import { Role } from \"./\";\nimport { alertService } from \"../_services\";\n\n// array in local storage for registered users\nconst usersKey = \"react-signup-verification-boilerplate-users\";\nconst users = JSON.parse(localStorage.getItem(usersKey)) || [];\n\nexport function configureFakeBackend() {\n  let realFetch = window.fetch;\n  window.fetch = function (url, opts) {\n    return new Promise((resolve, reject) => {\n      // wrap in timeout to simulate server api call\n      setTimeout(handleRoute, 500);\n\n      function handleRoute() {\n        const { method } = opts;\n        switch (true) {\n          case url.endsWith(\"/accounts/authenticate\") && method === \"POST\":\n            return authenticate();\n          case url.endsWith(\"/accounts/refresh-token\") && method === \"POST\":\n            return refreshToken();\n          case url.endsWith(\"/accounts/revoke-token\") && method === \"POST\":\n            return revokeToken();\n          case url.endsWith(\"/accounts/register\") && method === \"POST\":\n            return register();\n          case url.endsWith(\"/accounts/verify-email\") && method === \"POST\":\n            return verifyEmail();\n          case url.endsWith(\"/accounts/forgot-password\") && method === \"POST\":\n            return forgotPassword();\n          case url.endsWith(\"/accounts/validate-reset-token\") &&\n            method === \"POST\":\n            return validateResetToken();\n          case url.endsWith(\"/accounts/reset-password\") && method === \"POST\":\n            return resetPassword();\n          case url.endsWith(\"/accounts\") && method === \"GET\":\n            return getUsers();\n          case url.match(/\\/accounts\\/\\d+$/) && method === \"GET\":\n            return getUserById();\n          case url.endsWith(\"/accounts\") && method === \"POST\":\n            return createUser();\n          case url.match(/\\/accounts\\/\\d+$/) && method === \"PUT\":\n            return updateUser();\n          case url.match(/\\/accounts\\/\\d+$/) && method === \"DELETE\":\n            return deleteUser();\n          default:\n            // pass through any requests not handled above\n            return realFetch(url, opts)\n              .then((response) => resolve(response))\n              .catch((error) => reject(error));\n        }\n      }\n\n      // route functions\n\n      function authenticate() {\n        const { email, password } = body();\n        const user = users.find(\n          (x) => x.email === email && x.password === password && x.isVerified\n        );\n\n        if (!user) return error(\"Email or password is incorrect\");\n\n        // add refresh token to user\n        user.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok({\n          id: user.id,\n          email: user.email,\n          title: user.title,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          jwtToken: generateJwtToken(user),\n        });\n      }\n\n      function refreshToken() {\n        const refreshToken = getRefreshToken();\n\n        if (!refreshToken) return unauthorized();\n\n        const user = users.find((x) => x.refreshTokens.includes(refreshToken));\n\n        if (!user) return unauthorized();\n\n        // replace old refresh token with a new one and save\n        user.refreshTokens = user.refreshTokens.filter(\n          (x) => x !== refreshToken\n        );\n        user.refreshTokens.push(generateRefreshToken());\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok({\n          id: user.id,\n          email: user.email,\n          title: user.title,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n          jwtToken: generateJwtToken(user),\n        });\n      }\n\n      function revokeToken() {\n        if (!isAuthenticated()) return unauthorized();\n\n        const refreshToken = getRefreshToken();\n        const user = users.find((x) => x.refreshTokens.includes(refreshToken));\n\n        // revoke token and save\n        user.refreshTokens = user.refreshTokens.filter(\n          (x) => x !== refreshToken\n        );\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok();\n      }\n\n      function register({ location }) {\n        const user = body();\n\n        if (users.find((x) => x.email === user.email)) {\n          // display email already registered \"email\" in alert\n          setTimeout(() => {\n            alertService.info(\n              `\n                            <h4>Email Already Registered</h4>\n                            <p>Your email ${user.email} is already registered.</p>\n                            <p>If you don't know your password please visit the <a href=\"${location.origin}/account/forgot-password\">forgot password</a> page.</p>\n                            <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                        `,\n              { autoClose: false }\n            );\n          }, 1000);\n\n          // always return ok() response to prevent email enumeration\n          return ok();\n        }\n\n        // assign user id and a few other properties then save\n        user.id = newUserId();\n        if (user.id === 1) {\n          // first registered user is an admin\n          user.role = Role.Admin;\n        } else {\n          user.role = Role.User;\n        }\n        user.dateCreated = new Date().toISOString();\n        user.verificationToken = new Date().getTime().toString();\n        user.isVerified = false;\n        user.refreshTokens = [];\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        // display verification email in alert\n        setTimeout(() => {\n          const verifyUrl = `${location.origin}/account/verify-email?token=${user.verificationToken}`;\n          alertService.info(\n            `\n                        <h4>Verification Email</h4>\n                        <p>Thanks for registering!</p>\n                        <p>Please click the below link to verify your email address:</p>\n                        <p><a href=\"${verifyUrl}\">${verifyUrl}</a></p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                    `,\n            { autoClose: false }\n          );\n        }, 1000);\n\n        return ok();\n      }\n\n      function verifyEmail() {\n        const { token } = body();\n        const user = users.find(\n          (x) => !!x.verificationToken && x.verificationToken === token\n        );\n\n        if (!user) return error(\"Verification failed\");\n\n        // set is verified flag to true if token is valid\n        user.isVerified = true;\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok();\n      }\n\n      function forgotPassword({ location }) {\n        const { email } = body();\n        const user = users.find((x) => x.email === email);\n\n        // always return ok() response to prevent email enumeration\n        if (!user) return ok();\n\n        // create reset token that expires after 24 hours\n        user.resetToken = new Date().getTime().toString();\n        user.resetTokenExpires = new Date(\n          Date.now() + 24 * 60 * 60 * 1000\n        ).toISOString();\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        // display password reset email in alert\n        setTimeout(() => {\n          const resetUrl = `${location.origin}/account/reset-password?token=${user.resetToken}`;\n          alertService.info(\n            `\n                        <h4>Reset Password Email</h4>\n                        <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>\n                        <p><a href=\"${resetUrl}\">${resetUrl}</a></p>\n                        <div><strong>NOTE:</strong> The fake backend displayed this \"email\" so you can test without an api. A real backend would send a real email.</div>\n                    `,\n            { autoClose: false }\n          );\n        }, 1000);\n\n        return ok();\n      }\n\n      function validateResetToken() {\n        const { token } = body();\n        const user = users.find(\n          (x) =>\n            !!x.resetToken &&\n            x.resetToken === token &&\n            new Date() < new Date(x.resetTokenExpires)\n        );\n\n        if (!user) return error(\"Invalid token\");\n\n        return ok();\n      }\n\n      function resetPassword() {\n        const { token, password } = body();\n        const user = users.find(\n          (x) =>\n            !!x.resetToken &&\n            x.resetToken === token &&\n            new Date() < new Date(x.resetTokenExpires)\n        );\n\n        if (!user) return error(\"Invalid token\");\n\n        // update password and remove reset token\n        user.password = password;\n        user.isVerified = true;\n        delete user.resetToken;\n        delete user.resetTokenExpires;\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok();\n      }\n\n      function getUsers() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n\n        return ok(users);\n      }\n\n      function getUserById() {\n        if (!isAuthenticated()) return unauthorized();\n\n        let user = users.find((x) => x.id === idFromUrl());\n\n        // users can get own profile and admins can get all profiles\n        if (user.id !== currentUser().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n\n        return ok(user);\n      }\n\n      function createUser() {\n        if (!isAuthorized(Role.Admin)) return unauthorized();\n\n        const user = body();\n        if (users.find((x) => x.email === user.email)) {\n          return error(`Email ${user.email} is already registered`);\n        }\n\n        // assign user id and a few other properties then save\n        user.id = newUserId();\n        user.dateCreated = new Date().toISOString();\n        user.isVerified = true;\n        delete user.confirmPassword;\n        users.push(user);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok();\n      }\n\n      function updateUser() {\n        if (!isAuthenticated()) return unauthorized();\n\n        let params = body();\n        let user = users.find((x) => x.id === idFromUrl());\n\n        // users can update own profile and admins can update all profiles\n        if (user.id !== currentUser().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n\n        // only update password if included\n        if (!params.password) {\n          delete params.password;\n        }\n        // don't save confirm password\n        delete params.confirmPassword;\n\n        // update and save user\n        Object.assign(user, params);\n        localStorage.setItem(usersKey, JSON.stringify(users));\n\n        return ok({\n          id: user.id,\n          email: user.email,\n          title: user.title,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          role: user.role,\n        });\n      }\n\n      function deleteUser() {\n        if (!isAuthenticated()) return unauthorized();\n\n        let user = users.find((x) => x.id === idFromUrl());\n\n        // users can delete own account and admins can delete any account\n        if (user.id !== currentUser().id && !isAuthorized(Role.Admin)) {\n          return unauthorized();\n        }\n\n        // delete user then save\n        users = users.filter((x) => x.id !== idFromUrl());\n        localStorage.setItem(usersKey, JSON.stringify(users));\n        return ok();\n      }\n\n      // helper functions\n\n      function ok(body) {\n        resolve({\n          ok: true,\n          text: () => Promise.resolve(JSON.stringify(body)),\n        });\n      }\n\n      function unauthorized() {\n        resolve({\n          status: 401,\n          text: () =>\n            Promise.resolve(JSON.stringify({ message: \"Unauthorized\" })),\n        });\n      }\n\n      function error(message) {\n        resolve({\n          status: 400,\n          text: () => Promise.resolve(JSON.stringify({ message })),\n        });\n      }\n\n      function isAuthenticated() {\n        return !!currentUser();\n      }\n\n      function isAuthorized(role) {\n        const user = currentUser();\n        if (!user) return false;\n        return user.role === role;\n      }\n\n      function idFromUrl() {\n        const urlParts = url.split(\"/\");\n        return parseInt(urlParts[urlParts.length - 1]);\n      }\n\n      function body() {\n        return opts.body && JSON.parse(opts.body);\n      }\n\n      function newUserId() {\n        return users.length ? Math.max(...users.map((x) => x.id)) + 1 : 1;\n      }\n\n      function generateJwtToken(user) {\n        // create token that expires in 15 minutes\n        const tokenPayload = {\n          exp: Math.round(\n            new Date(Date.now() + 15 * 60 * 1000).getTime() / 1000\n          ),\n          id: user.id,\n        };\n        return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;\n      }\n\n      function currentUser() {\n        // check if jwt token is in auth header\n        const authHeader = opts.headers[\"Authorization\"] || \"\";\n        if (!authHeader.startsWith(\"Bearer fake-jwt-token\")) return;\n\n        // check if token is expired\n        const jwtToken = JSON.parse(atob(authHeader.split(\".\")[1]));\n        const tokenExpired = Date.now() > jwtToken.exp * 1000;\n        if (tokenExpired) return;\n\n        const user = users.find((x) => x.id === jwtToken.id);\n        return user;\n      }\n\n      function generateRefreshToken() {\n        const token = new Date().getTime().toString();\n\n        // add token cookie that expires in 7 days\n        const expires = new Date(\n          Date.now() + 7 * 24 * 60 * 60 * 1000\n        ).toUTCString();\n        document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;\n\n        return token;\n      }\n\n      function getRefreshToken() {\n        // get refresh token from cookie\n        return (\n          document.cookie\n            .split(\";\")\n            .find((x) => x.includes(\"fakeRefreshToken\")) || \"=\"\n        ).split(\"=\")[1];\n      }\n    });\n  };\n}\n","import { accountService } from \"../_services\";\n\nexport const fetchWrapper = {\n  get,\n  post,\n  put,\n  delete: _delete,\n};\n\nfunction get(url) {\n  const requestOptions = {\n    method: \"GET\",\n    headers: authHeader(url),\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n}\n\nfunction post(url, body) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\", ...authHeader(url) },\n    credentials: \"include\",\n    body: JSON.stringify(body),\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n}\n\nfunction put(url, body) {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\", ...authHeader(url) },\n    body: JSON.stringify(body),\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n}\n\n// prefixed with underscored because delete is a reserved word in javascript\nfunction _delete(url) {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: authHeader(url),\n  };\n  return fetch(url, requestOptions).then(handleResponse);\n}\n\n// helper functions\n\nfunction authHeader(url) {\n  // return auth header with jwt if user is logged in and request is to the api url\n  const user = accountService.userValue;\n  const isLoggedIn = user && user.jwtToken;\n  const isApiUrl = url.startsWith(\"http://localhost:4000\");\n  if (isLoggedIn && isApiUrl) {\n    return { Authorization: `Bearer ${user.jwtToken}` };\n  } else {\n    return {};\n  }\n}\n\nfunction handleResponse(response) {\n  return response.text().then((text) => {\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if ([401, 403].includes(response.status) && accountService.userValue) {\n        // auto logout if 401 Unauthorized or 403 Forbidden response returned from api\n        accountService.logout();\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","export const Role = {\n    Admin: 'Admin',\n    User: 'User'    \n}","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { alertService, AlertType } from \"../_services\";\r\nimport { history } from \"../_helpers\";\r\n\r\nconst propTypes = {\r\n  id: PropTypes.string,\r\n  fade: PropTypes.bool,\r\n};\r\n\r\nconst defaultProps = {\r\n  id: \"default-alert\",\r\n  fade: true,\r\n};\r\n\r\nfunction Alert({ id, fade }) {\r\n  const [alerts, setAlerts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // subscribe to new alert notifications\r\n    const subscription = alertService.onAlert(id).subscribe((alert) => {\r\n      // clear alerts when an empty alert is received\r\n      if (!alert.message) {\r\n        setAlerts((alerts) => {\r\n          // filter out alerts without 'keepAfterRouteChange' flag\r\n          const filteredAlerts = alerts.filter((x) => x.keepAfterRouteChange);\r\n\r\n          // remove 'keepAfterRouteChange' flag on the rest\r\n          filteredAlerts.forEach((x) => delete x.keepAfterRouteChange);\r\n          return filteredAlerts;\r\n        });\r\n      } else {\r\n        // add alert to array\r\n        setAlerts((alerts) => [...alerts, alert]);\r\n\r\n        // auto close alert if required\r\n        if (alert.autoClose) {\r\n          setTimeout(() => removeAlert(alert), 3000);\r\n        }\r\n      }\r\n    });\r\n\r\n    // clear alerts on location change\r\n    const historyUnlisten = history.listen(({ pathname }) => {\r\n      // don't clear if pathname has trailing slash because this will be auto redirected again\r\n      if (pathname.endsWith(\"/\")) return;\r\n\r\n      alertService.clear(id);\r\n    });\r\n\r\n    // clean up function that runs when the component unmounts\r\n    return () => {\r\n      // unsubscribe & unlisten to avoid memory leaks\r\n      subscription.unsubscribe();\r\n      historyUnlisten();\r\n    };\r\n  }, []);\r\n\r\n  function removeAlert(alert) {\r\n    if (fade) {\r\n      // fade out alert\r\n      const alertWithFade = { ...alert, fade: true };\r\n      setAlerts((alerts) =>\r\n        alerts.map((x) => (x === alert ? alertWithFade : x))\r\n      );\r\n\r\n      // remove alert after faded out\r\n      setTimeout(() => {\r\n        setAlerts((alerts) => alerts.filter((x) => x !== alertWithFade));\r\n      }, 250);\r\n    } else {\r\n      // remove alert\r\n      setAlerts((alerts) => alerts.filter((x) => x !== alert));\r\n    }\r\n  }\r\n\r\n  function cssClasses(alert) {\r\n    if (!alert) return;\r\n\r\n    const classes = [\"alert\", \"alert-dismissable\"];\r\n\r\n    const alertTypeClass = {\r\n      [AlertType.Success]: \"alert alert-success\",\r\n      [AlertType.Error]: \"alert alert-danger\",\r\n      [AlertType.Info]: \"alert alert-info\",\r\n      [AlertType.Warning]: \"alert alert-warning\",\r\n    };\r\n\r\n    classes.push(alertTypeClass[alert.type]);\r\n\r\n    if (alert.fade) {\r\n      classes.push(\"fade\");\r\n    }\r\n\r\n    return classes.join(\" \");\r\n  }\r\n\r\n  if (!alerts.length) return null;\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"m-3\">\r\n        {alerts.map((alert, index) => (\r\n          <div key={index} className={cssClasses(alert)}>\r\n            <a className=\"close\" onClick={() => removeAlert(alert)}>\r\n              &times;\r\n            </a>\r\n            <span dangerouslySetInnerHTML={{ __html: alert.message }}></span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nAlert.propTypes = propTypes;\r\nAlert.defaultProps = defaultProps;\r\nexport { Alert };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NavLink, Route } from \"react-router-dom\";\r\n\r\nimport { Role } from \"../_helpers\";\r\nimport { accountService } from \"../_services\";\r\n\r\nfunction Nav() {\r\n  const [user, setUser] = useState({});\r\n\r\n  useEffect(() => {\r\n    const subscription = accountService.user.subscribe((x) => setUser(x));\r\n    return subscription.unsubscribe;\r\n  }, []);\r\n\r\n  // only show nav when logged in\r\n  if (!user) return null;\r\n\r\n  return (\r\n    <div>\r\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n        <div className=\"navbar-nav\">\r\n          <NavLink exact to=\"/\" className=\"nav-item nav-link\">\r\n            Головна\r\n          </NavLink>\r\n          <NavLink to=\"/classificator\" className=\"nav-item nav-link\">\r\n            Класифікація\r\n          </NavLink>\r\n          <NavLink to=\"/archive\" className=\"nav-item nav-link\">\r\n            Архів\r\n          </NavLink>\r\n          {user.role === Role.Admin && (\r\n            <NavLink to=\"/admin\" className=\"nav-item nav-link\">\r\n              Адміністратор\r\n            </NavLink>\r\n          )}\r\n          <a onClick={accountService.logout} className=\"nav-item nav-link\">\r\n            Вийти\r\n          </a>\r\n        </div>\r\n      </nav>\r\n      <Route path=\"/admin\" component={AdminNav} />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction AdminNav({ match }) {\r\n  const { path } = match;\r\n\r\n  return (\r\n    <nav className=\"admin-nav navbar navbar-expand navbar-light\">\r\n      <div className=\"navbar-nav\">\r\n        <NavLink to={`${path}/users`} className=\"nav-item nav-link\">\r\n          Users\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport { Nav };\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\n\r\nimport { accountService } from \"../_services\";\r\n\r\nfunction PrivateRoute({ component: Component, roles, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        const user = accountService.userValue;\r\n        if (!user) {\r\n          // not logged in so redirect to login page with the return url\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/account/login\",\r\n                state: { from: props.location },\r\n              }}\r\n            />\r\n          );\r\n        }\r\n\r\n        // check if route is restricted by role\r\n        if (roles && roles.indexOf(user.role) === -1) {\r\n          // role not authorized so redirect to home page\r\n          return <Redirect to={{ pathname: \"/\" }} />;\r\n        }\r\n\r\n        // authorized so return component\r\n        return <Component {...props} />;\r\n      }}\r\n    />\r\n  );\r\n}\r\n\r\nexport { PrivateRoute };\r\n","import React from \"react\";\n\nimport { accountService } from \"../_services\";\n\nfunction Home() {\n  const user = accountService.userValue;\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"container\">\n        <h1>Hi {user.firstName}!</h1>\n        <p>You're logged in with React & JWT!!</p>\n      </div>\n    </div>\n  );\n}\n\nexport { Home };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { accountService, alertService } from \"../_services\";\n\nfunction Login({ history, location }) {\n  const initialValues = {\n    email: \"\",\n    password: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n    password: Yup.string().required(\"Password is required\"),\n  });\n\n  function onSubmit({ email, password }, { setSubmitting }) {\n    alertService.clear();\n    accountService\n      .login(email, password)\n      .then(() => {\n        const { from } = location.state || { from: { pathname: \"/\" } };\n        history.push(from);\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        alertService.error(error);\n      });\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {({ errors, touched, isSubmitting }) => (\n        <Form>\n          <h3 className=\"card-header\">Login</h3>\n          <div className=\"card-body\">\n            <div className=\"form-group\">\n              <label>Email</label>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                className={\n                  \"form-control\" +\n                  (errors.email && touched.email ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Password</label>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                className={\n                  \"form-control\" +\n                  (errors.password && touched.password ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"btn btn-primary\"\n                >\n                  {isSubmitting && (\n                    <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n                  )}\n                  Login\n                </button>\n                <Link to=\"register\" className=\"btn btn-link\">\n                  Register\n                </Link>\n              </div>\n              <div className=\"form-group col text-right\">\n                <Link to=\"forgot-password\" className=\"btn btn-link pr-0\">\n                  Forgot Password?\n                </Link>\n              </div>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport { Login };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { accountService, alertService } from \"../_services\";\n\nfunction Register({ history }) {\n  const initialValues = {\n    title: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    acceptTerms: false,\n  };\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is required\"),\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last Name is required\"),\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n    password: Yup.string()\n      .min(6, \"Password must be at least 6 characters\")\n      .required(\"Password is required\"),\n    confirmPassword: Yup.string()\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n      .required(\"Confirm Password is required\"),\n    acceptTerms: Yup.bool().oneOf(\n      [true],\n      \"Accept Terms & Conditions is required\"\n    ),\n  });\n\n  function onSubmit(fields, { setStatus, setSubmitting }) {\n    setStatus();\n    accountService\n      .register(fields)\n      .then(() => {\n        alertService.success(\n          \"Registration successful, please check your email for verification instructions\",\n          { keepAfterRouteChange: true }\n        );\n        history.push(\"login\");\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        alertService.error(error);\n      });\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {({ errors, touched, isSubmitting }) => (\n        <Form>\n          <h3 className=\"card-header\">Register</h3>\n          <div className=\"card-body\">\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <label>Title</label>\n                <Field\n                  name=\"title\"\n                  as=\"select\"\n                  className={\n                    \"form-control\" +\n                    (errors.title && touched.title ? \" is-invalid\" : \"\")\n                  }\n                >\n                  <option value=\"\"></option>\n                  <option value=\"Mr\">Mr</option>\n                  <option value=\"Mrs\">Mrs</option>\n                  <option value=\"Miss\">Miss</option>\n                  <option value=\"Ms\">Ms</option>\n                </Field>\n                <ErrorMessage\n                  name=\"title\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col-5\">\n                <label>First Name</label>\n                <Field\n                  name=\"firstName\"\n                  type=\"text\"\n                  className={\n                    \"form-control\" +\n                    (errors.firstName && touched.firstName ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"firstName\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col-5\">\n                <label>Last Name</label>\n                <Field\n                  name=\"lastName\"\n                  type=\"text\"\n                  className={\n                    \"form-control\" +\n                    (errors.lastName && touched.lastName ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"lastName\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <label>Email</label>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                className={\n                  \"form-control\" +\n                  (errors.email && touched.email ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <label>Password</label>\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  className={\n                    \"form-control\" +\n                    (errors.password && touched.password ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"password\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col\">\n                <label>Confirm Password</label>\n                <Field\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  className={\n                    \"form-control\" +\n                    (errors.confirmPassword && touched.confirmPassword\n                      ? \" is-invalid\"\n                      : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"confirmPassword\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n            </div>\n            <div className=\"form-group form-check\">\n              <Field\n                type=\"checkbox\"\n                name=\"acceptTerms\"\n                id=\"acceptTerms\"\n                className={\n                  \"form-check-input \" +\n                  (errors.acceptTerms && touched.acceptTerms\n                    ? \" is-invalid\"\n                    : \"\")\n                }\n              />\n              <label htmlFor=\"acceptTerms\" className=\"form-check-label\">\n                Accept Terms & Conditions\n              </label>\n              <ErrorMessage\n                name=\"acceptTerms\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"btn btn-primary\"\n              >\n                {isSubmitting && (\n                  <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n                )}\n                Register\n              </button>\n              <Link to=\"login\" className=\"btn btn-link\">\n                Cancel\n              </Link>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport { Register };\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport queryString from \"query-string\";\n\nimport { accountService, alertService } from \"../_services\";\n\nfunction VerifyEmail({ history, location }) {\n  const EmailStatus = {\n    Verifying: \"Verifying\",\n    Failed: \"Failed\",\n  };\n\n  const [emailStatus, setEmailStatus] = useState(EmailStatus.Verifying);\n\n  useEffect(() => {\n    const { token } = queryString.parse(location.search);\n\n    // remove token from url to prevent http referer leakage\n    history.replace(location.pathname);\n\n    accountService\n      .verifyEmail(token)\n      .then(() => {\n        alertService.success(\"Verification successful, you can now login\", {\n          keepAfterRouteChange: true,\n        });\n        history.push(\"login\");\n      })\n      .catch(() => {\n        setEmailStatus(EmailStatus.Failed);\n      });\n  }, []);\n\n  function getBody() {\n    switch (emailStatus) {\n      case EmailStatus.Verifying:\n        return <div>Verifying...</div>;\n      case EmailStatus.Failed:\n        return (\n          <div>\n            Verification failed, you can also verify your account using the{\" \"}\n            <Link to=\"forgot-password\">forgot password</Link> page.\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div>\n      <h3 className=\"card-header\">Verify Email</h3>\n      <div className=\"card-body\">{getBody()}</div>\n    </div>\n  );\n}\n\nexport { VerifyEmail };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { accountService, alertService } from \"../_services\";\n\nfunction ForgotPassword() {\n  const initialValues = {\n    email: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n  });\n\n  function onSubmit({ email }, { setSubmitting }) {\n    alertService.clear();\n    accountService\n      .forgotPassword(email)\n      .then(() =>\n        alertService.success(\n          \"Please check your email for password reset instructions\"\n        )\n      )\n      .catch((error) => alertService.error(error))\n      .finally(() => setSubmitting(false));\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {({ errors, touched, isSubmitting }) => (\n        <Form>\n          <h3 className=\"card-header\">Forgot Password</h3>\n          <div className=\"card-body\">\n            <div className=\"form-group\">\n              <label>Email</label>\n              <Field\n                name=\"email\"\n                type=\"text\"\n                className={\n                  \"form-control\" +\n                  (errors.email && touched.email ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"email\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"btn btn-primary\"\n                >\n                  {isSubmitting && (\n                    <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n                  )}\n                  Submit\n                </button>\n                <Link to=\"login\" className=\"btn btn-link\">\n                  Cancel\n                </Link>\n              </div>\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport { ForgotPassword };\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { accountService, alertService } from \"../_services\";\n\nfunction ResetPassword({ history, location }) {\n  const TokenStatus = {\n    Validating: \"Validating\",\n    Valid: \"Valid\",\n    Invalid: \"Invalid\",\n  };\n\n  const [token, setToken] = useState(null);\n  const [tokenStatus, setTokenStatus] = useState(TokenStatus.Validating);\n\n  useEffect(() => {\n    const { token } = queryString.parse(location.search);\n\n    // remove token from url to prevent http referer leakage\n    history.replace(location.pathname);\n\n    accountService\n      .validateResetToken(token)\n      .then(() => {\n        setToken(token);\n        setTokenStatus(TokenStatus.Valid);\n      })\n      .catch(() => {\n        setTokenStatus(TokenStatus.Invalid);\n      });\n  }, []);\n\n  function getForm() {\n    const initialValues = {\n      password: \"\",\n      confirmPassword: \"\",\n    };\n\n    const validationSchema = Yup.object().shape({\n      password: Yup.string()\n        .min(6, \"Password must be at least 6 characters\")\n        .required(\"Password is required\"),\n      confirmPassword: Yup.string()\n        .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\n        .required(\"Confirm Password is required\"),\n    });\n\n    function onSubmit({ password, confirmPassword }, { setSubmitting }) {\n      alertService.clear();\n      accountService\n        .resetPassword({ token, password, confirmPassword })\n        .then(() => {\n          alertService.success(\"Password reset successful, you can now login\", {\n            keepAfterRouteChange: true,\n          });\n          history.push(\"login\");\n        })\n        .catch((error) => {\n          setSubmitting(false);\n          alertService.error(error);\n        });\n    }\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        validationSchema={validationSchema}\n        onSubmit={onSubmit}\n      >\n        {({ errors, touched, isSubmitting }) => (\n          <Form>\n            <div className=\"form-group\">\n              <label>Password</label>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                className={\n                  \"form-control\" +\n                  (errors.password && touched.password ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label>Confirm Password</label>\n              <Field\n                name=\"confirmPassword\"\n                type=\"password\"\n                className={\n                  \"form-control\" +\n                  (errors.confirmPassword && touched.confirmPassword\n                    ? \" is-invalid\"\n                    : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"confirmPassword\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"btn btn-primary\"\n                >\n                  {isSubmitting && (\n                    <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n                  )}\n                  Reset Password\n                </button>\n                <Link to=\"/login\" className=\"btn btn-link\">\n                  Cancel\n                </Link>\n              </div>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    );\n  }\n\n  function getBody() {\n    switch (tokenStatus) {\n      case TokenStatus.Valid:\n        return getForm();\n      case TokenStatus.Invalid:\n        return (\n          <div>\n            Token validation failed, if the token has expired you can get a new\n            one at the <Link to=\"forgot-password\">forgot password</Link> page.\n          </div>\n        );\n      case TokenStatus.Validating:\n        return <div>Validating token...</div>;\n    }\n  }\n\n  return (\n    <div>\n      <h3 className=\"card-header\">Reset Password</h3>\n      <div className=\"card-body\">{getBody()}</div>\n    </div>\n  );\n}\n\nexport { ResetPassword };\n","import React, { useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { accountService } from \"../_services\";\n\nimport { Login } from \"./Login\";\nimport { Register } from \"./Register\";\nimport { VerifyEmail } from \"./VerifyEmail\";\nimport { ForgotPassword } from \"./ForgotPassword\";\nimport { ResetPassword } from \"./ResetPassword\";\n\nfunction Account({ history, match }) {\n  const { path } = match;\n\n  useEffect(() => {\n    // redirect to home if already logged in\n    if (accountService.userValue) {\n      history.push(\"/\");\n    }\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-8 offset-sm-2 mt-5\">\n          <div className=\"card m-3\">\n            <Switch>\n              <Route path={`${path}/login`} component={Login} />\n              <Route path={`${path}/register`} component={Register} />\n              <Route path={`${path}/verify-email`} component={VerifyEmail} />\n              <Route\n                path={`${path}/forgot-password`}\n                component={ForgotPassword}\n              />\n              <Route\n                path={`${path}/reset-password`}\n                component={ResetPassword}\n              />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport { Account };\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { accountService } from \"../_services\";\n\nfunction Details({ match }) {\n  const { path } = match;\n  const user = accountService.userValue;\n\n  return (\n    <div>\n      <h1>My Profile</h1>\n      <p>\n        <strong>Name: </strong> {user.title} {user.firstName} {user.lastName}\n        <br />\n        <strong>Email: </strong> {user.email}\n      </p>\n      <p>\n        <Link to={`${path}/update`}>Update Profile</Link>\n      </p>\n    </div>\n  );\n}\n\nexport { Details };\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { accountService, alertService } from \"../_services\";\n\nfunction Update({ history }) {\n  const user = accountService.userValue;\n  const initialValues = {\n    title: user.title,\n    firstName: user.firstName,\n    lastName: user.lastName,\n    email: user.email,\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is required\"),\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last Name is required\"),\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n    password: Yup.string().min(6, \"Password must be at least 6 characters\"),\n    confirmPassword: Yup.string()\n      .when(\"password\", (password, schema) => {\n        if (password) return schema.required(\"Confirm Password is required\");\n      })\n      .oneOf([Yup.ref(\"password\")], \"Passwords must match\"),\n  });\n\n  function onSubmit(fields, { setStatus, setSubmitting }) {\n    setStatus();\n    accountService\n      .update(user.id, fields)\n      .then(() => {\n        alertService.success(\"Update successful\", {\n          keepAfterRouteChange: true,\n        });\n        history.push(\".\");\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        alertService.error(error);\n      });\n  }\n\n  const [isDeleting, setIsDeleting] = useState(false);\n  function onDelete() {\n    // if (confirm(\"Are you sure?\")) {\n    //   setIsDeleting(true);\n    //   accountService\n    //     .delete(user.id)\n    //     .then(() => alertService.success(\"Account deleted successfully\"));\n    // }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {({ errors, touched, isSubmitting }) => (\n        <Form>\n          <h1>Update Profile</h1>\n          <div className=\"form-row\">\n            <div className=\"form-group col\">\n              <label>Title</label>\n              <Field\n                name=\"title\"\n                as=\"select\"\n                className={\n                  \"form-control\" +\n                  (errors.title && touched.title ? \" is-invalid\" : \"\")\n                }\n              >\n                <option value=\"\"></option>\n                <option value=\"Mr\">Mr</option>\n                <option value=\"Mrs\">Mrs</option>\n                <option value=\"Miss\">Miss</option>\n                <option value=\"Ms\">Ms</option>\n              </Field>\n              <ErrorMessage\n                name=\"title\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-group col-5\">\n              <label>First Name</label>\n              <Field\n                name=\"firstName\"\n                type=\"text\"\n                className={\n                  \"form-control\" +\n                  (errors.firstName && touched.firstName ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"firstName\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-group col-5\">\n              <label>Last Name</label>\n              <Field\n                name=\"lastName\"\n                type=\"text\"\n                className={\n                  \"form-control\" +\n                  (errors.lastName && touched.lastName ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"lastName\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label>Email</label>\n            <Field\n              name=\"email\"\n              type=\"text\"\n              className={\n                \"form-control\" +\n                (errors.email && touched.email ? \" is-invalid\" : \"\")\n              }\n            />\n            <ErrorMessage\n              name=\"email\"\n              component=\"div\"\n              className=\"invalid-feedback\"\n            />\n          </div>\n          <h3 className=\"pt-3\">Change Password</h3>\n          <p>Leave blank to keep the same password</p>\n          <div className=\"form-row\">\n            <div className=\"form-group col\">\n              <label>Password</label>\n              <Field\n                name=\"password\"\n                type=\"password\"\n                className={\n                  \"form-control\" +\n                  (errors.password && touched.password ? \" is-invalid\" : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"password\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n            <div className=\"form-group col\">\n              <label>Confirm Password</label>\n              <Field\n                name=\"confirmPassword\"\n                type=\"password\"\n                className={\n                  \"form-control\" +\n                  (errors.confirmPassword && touched.confirmPassword\n                    ? \" is-invalid\"\n                    : \"\")\n                }\n              />\n              <ErrorMessage\n                name=\"confirmPassword\"\n                component=\"div\"\n                className=\"invalid-feedback\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"btn btn-primary mr-2\"\n            >\n              {isSubmitting && (\n                <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n              )}\n              Update\n            </button>\n            <button\n              type=\"button\"\n              onClick={() => onDelete()}\n              className=\"btn btn-danger\"\n              style={{ width: \"75px\" }}\n              disabled={isDeleting}\n            >\n              {isDeleting ? (\n                <span className=\"spinner-border spinner-border-sm\"></span>\n              ) : (\n                <span>Delete</span>\n              )}\n            </button>\n            <Link to=\".\" className=\"btn btn-link\">\n              Cancel\n            </Link>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n}\n\nexport { Update };\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport { Details } from \"./Details\";\nimport { Update } from \"./Update\";\n\nfunction Profile({ match }) {\n  const { path } = match;\n\n  return (\n    <div className=\"p-4\">\n      <div className=\"container\">\n        <Switch>\n          <Route exact path={path} component={Details} />\n          <Route path={`${path}/update`} component={Update} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport { Profile };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Overview({ match }) {\n    const { path } = match;\n\n    return (\n        <div>\n            <h1>Admin</h1>\n            <p>This section can only be accessed by administrators.</p>\n            <p><Link to={`${path}/users`}>Manage Users</Link></p>\n        </div>\n    );\n}\n\nexport { Overview };","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { accountService } from \"../../_services\";\n\nfunction List({ match }) {\n  const { path } = match;\n  const [users, setUsers] = useState(null);\n\n  useEffect(() => {\n    accountService.getAll().then((x) => setUsers(x));\n  }, []);\n\n  function deleteUser(id) {\n    setUsers(\n      users.map((x) => {\n        if (x.id === id) {\n          x.isDeleting = true;\n        }\n        return x;\n      })\n    );\n    accountService.delete(id).then(() => {\n      setUsers((users) => users.filter((x) => x.id !== id));\n    });\n  }\n\n  return (\n    <div>\n      <h1>Users</h1>\n      <p>All users from secure (admin only) api end point:</p>\n      <Link to={`${path}/add`} className=\"btn btn-sm btn-success mb-2\">\n        Add User\n      </Link>\n      <table className=\"table table-striped\">\n        <thead>\n          <tr>\n            <th style={{ width: \"30%\" }}>Name</th>\n            <th style={{ width: \"30%\" }}>Email</th>\n            <th style={{ width: \"30%\" }}>Role</th>\n            <th style={{ width: \"10%\" }}></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users &&\n            users.map((user) => (\n              <tr key={user.id}>\n                <td>\n                  {user.title} {user.firstName} {user.lastName}\n                </td>\n                <td>{user.email}</td>\n                <td>{user.role}</td>\n                <td style={{ whiteSpace: \"nowrap\" }}>\n                  <Link\n                    to={`${path}/edit/${user.id}`}\n                    className=\"btn btn-sm btn-primary mr-1\"\n                  >\n                    Edit\n                  </Link>\n                  <button\n                    onClick={() => deleteUser(user.id)}\n                    className=\"btn btn-sm btn-danger\"\n                    style={{ width: \"60px\" }}\n                    disabled={user.isDeleting}\n                  >\n                    {user.isDeleting ? (\n                      <span className=\"spinner-border spinner-border-sm\"></span>\n                    ) : (\n                      <span>Delete</span>\n                    )}\n                  </button>\n                </td>\n              </tr>\n            ))}\n          {!users && (\n            <tr>\n              <td colSpan=\"4\" className=\"text-center\">\n                <span className=\"spinner-border spinner-border-lg align-center\"></span>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport { List };\n","import React, { useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { accountService, alertService } from \"../../_services\";\n\nfunction AddEdit({ history, match }) {\n  const { id } = match.params;\n  const isAddMode = !id;\n\n  const initialValues = {\n    title: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    role: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n  };\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Title is required\"),\n    firstName: Yup.string().required(\"First Name is required\"),\n    lastName: Yup.string().required(\"Last Name is required\"),\n    email: Yup.string().email(\"Email is invalid\").required(\"Email is required\"),\n    role: Yup.string().required(\"Role is required\"),\n    password: Yup.string()\n      .concat(isAddMode ? Yup.string().required(\"Password is required\") : null)\n      .min(6, \"Password must be at least 6 characters\"),\n    confirmPassword: Yup.string()\n      .when(\"password\", (password, schema) => {\n        if (password) return schema.required(\"Confirm Password is required\");\n      })\n      .oneOf([Yup.ref(\"password\")], \"Passwords must match\"),\n  });\n\n  function onSubmit(fields, { setStatus, setSubmitting }) {\n    setStatus();\n    if (isAddMode) {\n      createUser(fields, setSubmitting);\n    } else {\n      updateUser(id, fields, setSubmitting);\n    }\n  }\n\n  function createUser(fields, setSubmitting) {\n    accountService\n      .create(fields)\n      .then(() => {\n        alertService.success(\"User added successfully\", {\n          keepAfterRouteChange: true,\n        });\n        history.push(\".\");\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        alertService.error(error);\n      });\n  }\n\n  function updateUser(id, fields, setSubmitting) {\n    accountService\n      .update(id, fields)\n      .then(() => {\n        alertService.success(\"Update successful\", {\n          keepAfterRouteChange: true,\n        });\n        history.push(\"..\");\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        alertService.error(error);\n      });\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={onSubmit}\n    >\n      {/* {({ errors, touched, isSubmitting, setFieldValue }) => {\n        useEffect(() => {\n          if (!isAddMode) {\n            // get user and set form fields\n            accountService.getById(id).then((user) => {\n              const fields = [\n                \"title\",\n                \"firstName\",\n                \"lastName\",\n                \"email\",\n                \"role\",\n              ];\n              fields.forEach((field) =>\n                setFieldValue(field, user[field], false)\n              );\n            });\n          }\n        }, []);\n\n        return (\n          <Form>\n            <h1>{isAddMode ? \"Add User\" : \"Edit User\"}</h1>\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <label>Title</label>\n                <Field\n                  name=\"title\"\n                  as=\"select\"\n                  className={\n                    \"form-control\" +\n                    (errors.title && touched.title ? \" is-invalid\" : \"\")\n                  }\n                >\n                  <option value=\"\"></option>\n                  <option value=\"Mr\">Mr</option>\n                  <option value=\"Mrs\">Mrs</option>\n                  <option value=\"Miss\">Miss</option>\n                  <option value=\"Ms\">Ms</option>\n                </Field>\n                <ErrorMessage\n                  name=\"title\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col-5\">\n                <label>First Name</label>\n                <Field\n                  name=\"firstName\"\n                  type=\"text\"\n                  className={\n                    \"form-control\" +\n                    (errors.firstName && touched.firstName ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"firstName\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col-5\">\n                <label>Last Name</label>\n                <Field\n                  name=\"lastName\"\n                  type=\"text\"\n                  className={\n                    \"form-control\" +\n                    (errors.lastName && touched.lastName ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"lastName\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n            </div>\n            <div className=\"form-row\">\n              <div className=\"form-group col-7\">\n                <label>Email</label>\n                <Field\n                  name=\"email\"\n                  type=\"text\"\n                  className={\n                    \"form-control\" +\n                    (errors.email && touched.email ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"email\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col\">\n                <label>Role</label>\n                <Field\n                  name=\"role\"\n                  as=\"select\"\n                  className={\n                    \"form-control\" +\n                    (errors.role && touched.role ? \" is-invalid\" : \"\")\n                  }\n                >\n                  <option value=\"\"></option>\n                  <option value=\"User\">User</option>\n                  <option value=\"Admin\">Admin</option>\n                </Field>\n                <ErrorMessage\n                  name=\"role\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n            </div>\n            {!isAddMode && (\n              <div>\n                <h3 className=\"pt-3\">Change Password</h3>\n                <p>Leave blank to keep the same password</p>\n              </div>\n            )}\n            <div className=\"form-row\">\n              <div className=\"form-group col\">\n                <label>Password</label>\n                <Field\n                  name=\"password\"\n                  type=\"password\"\n                  className={\n                    \"form-control\" +\n                    (errors.password && touched.password ? \" is-invalid\" : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"password\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n              <div className=\"form-group col\">\n                <label>Confirm Password</label>\n                <Field\n                  name=\"confirmPassword\"\n                  type=\"password\"\n                  className={\n                    \"form-control\" +\n                    (errors.confirmPassword && touched.confirmPassword\n                      ? \" is-invalid\"\n                      : \"\")\n                  }\n                />\n                <ErrorMessage\n                  name=\"confirmPassword\"\n                  component=\"div\"\n                  className=\"invalid-feedback\"\n                />\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}\n                className=\"btn btn-primary\"\n              >\n                {isSubmitting && (\n                  <span className=\"spinner-border spinner-border-sm mr-1\"></span>\n                )}\n                Save\n              </button>\n              <Link to={isAddMode ? \".\" : \"..\"} className=\"btn btn-link\">\n                Cancel\n              </Link>\n            </div>\n          </Form>\n        );\n      }} */}\n    </Formik>\n  );\n}\n\nexport { AddEdit };\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { List } from './List';\nimport { AddEdit } from './AddEdit';\n\nfunction Users({ match }) {\n    const { path } = match;\n    \n    return (\n        <Switch>\n            <Route exact path={path} component={List} />\n            <Route path={`${path}/add`} component={AddEdit} />\n            <Route path={`${path}/edit/:id`} component={AddEdit} />\n        </Switch>\n    );\n}\n\nexport { Users };","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { Overview } from './Overview';\nimport { Users } from './users';\n\nfunction Admin({ match }) {\n    const { path } = match;\n\n    return (\n        <div className=\"p-4\">\n            <div className=\"container\">\n                <Switch>\n                    <Route exact path={path} component={Overview} />\n                    <Route path={`${path}/users`} component={Users} />\n                </Switch>\n            </div>\n        </div>\n    );\n}\n\nexport { Admin };","import React, { useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { classificatorService } from \"../_services\";\n\nfunction Classificator() {\n  const [text, setText] = useState(\"\");\n\n  return (\n    <div>\n      <h1>Класифікатор новин</h1>\n      <TextField\n        onChange={(event) => setText(event.target.value)}\n        id=\"outlined-multiline-static\"\n        label=\"Вставити текст\"\n        multiline\n        rows={6}\n        fullWidth={true}\n        defaultValue={text}\n        variant=\"outlined\"\n      />\n      <Button\n        color={\"primary\"}\n        onClick={() => {\n          classificatorService.processText(text);\n        }}\n        variant={\"contained\"}\n      >\n        Класифікувати\n      </Button>\n    </div>\n  );\n}\n\nexport { Classificator };\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch, Redirect, useLocation } from \"react-router-dom\";\nimport { Nav, Alert, PrivateRoute } from \"./_components\";\nimport { accountService } from \"./_services\";\nimport { Home } from \"./home\";\nimport { Account } from \"./account\";\nimport { Profile } from \"./profile\";\nimport { Admin } from \"./admin\";\nimport { Classificator } from \"./classificator\";\nimport { Role } from \"./_helpers\";\nimport \"./App.css\";\n\nfunction App() {\n  const { pathname } = useLocation();\n  const [user, setUser] = useState({});\n\n  useEffect(() => {\n    const subscription = accountService.user.subscribe((x) => setUser(x));\n    return subscription.unsubscribe;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Nav></Nav>\n      <Alert></Alert>\n      <Switch>\n        <Redirect from=\"/:url*(/+)\" to={pathname.slice(0, -1)} />\n        <PrivateRoute exact path=\"/\" component={Home} />\n        <PrivateRoute path=\"/classificator\" component={Classificator} />\n        <PrivateRoute path=\"/archive\" component={Profile} />\n        <PrivateRoute path=\"/admin\" roles={[Role.Admin]} component={Admin} />\n        <Route path=\"/account\" component={Account} />\n        <Redirect from=\"*\" to=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\nimport { history } from \"./_helpers\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// import { configureFakeBackend } from \"./_helpers\";\n// configureFakeBackend();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}